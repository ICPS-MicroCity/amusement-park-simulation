module org:protelis:microcity:rounds

def isGuest() = env.has("guest")
def id() = self.getDeviceUID().getId()
def satisfy(value) = env.put("satisfied", value)

def roundCapacity() = env.get("roundCapacity")
def satisfiedGuests() = min(roundCapacity(), queue().size())
def queue() =
    if (env.has("org:protelis:microcity:queue")) {
        env.get("org:protelis:microcity:queue")
    } else {
        []
    }

def dequeue() =
    if (isGuest()) {
        []
    } else {
        if (queue().isEmpty()) {
            []
        } else {
            queue().subTuple(0, satisfiedGuests())
        }
    }

def freedom() = foldUnion(nbr(dequeue())).contains(id())

if (freedom()) {
    satisfy(true)
}

