incarnation: sapere

variables:
  choice: &choice
    language: scala
    formula: |
      val nActivities = 10
      val activities = (0 to nActivities).toList
      activities(scala.util.Random(0).nextInt(nActivities))

# Use an OpenStreetMap Environment, deploying nodes only on streets
environment:
  type: OSMEnvironment
  parameters: [mirabilandia.osm.pbf, true]

# The network model used allows to choose the nodes that have the "cloud" molecule in order to simulate an access point behaviour
network-model:
  type: ConnectToAccessPoint
  parameters: [150.0, activity]

# Define the physical bounds of the park
_bounds: &bounds
  [[44.338, 12.26],[44.335, 12.263],[44.337, 12.268],[44.34, 12.266],[44.34, 12.264],[44.34, 12.262]]

# Define the time-distribution rate
_rate: &rate
  3.14159

# Define the gradient that activities have to spread in order to let guests know their position
_gradient: &gradient
  - time-distribution: *rate
    type: SAPEREGradient
    parameters:
      - "source, Distance"                      # Source template
      - "gradient, Distance, #O"                # Gradient template
      - 1                                       # LSA value position (where the progress formula result should be stored)
      - "(Distance + (#ROUTE * (K + 1))) + 1"   # Progress Formula
      - "context, K"                            # Contextualization LSA Template
      - 20000                                   # Gradient Threshold

# Define the movement of guests
_movement: &movement
  - time-distribution: *rate
    type: SAPEREGradient
    parameters:
      - source, Distance
      - gradient, Distance, Dest
      - 1
      - "Distance + #ROUTE"
      - whatever
      - 20000
  - time-distribution:
      type: DiracComb
      parameters: [0.02]
    type: Event
    actions:
      - type: SAPEREWalkerRiseGradient
        parameters: [guest, 0.1, 0, 0, "gradient, Distance, #O", 2]

_firstDestination: &firstDestination
  - time-distribution: *rate
    program: "{destination, N} --> {destination, N + 1}"
  - program: "{destination} --> {destination, 0}"
  - program: "{destination, def: N > 1000} --> {destination}"

# Define guests
_guests: &guests
  - type: Polygon
    parameters: [ 10, *bounds ]
    programs:
      - *movement
      - *firstDestination
    contents:
      - molecule: guest
      - molecule: destination

# Define restaurants
_restaurants: &restaurants
  - type: Point
    parameters: [44.33747, 12.26208]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "Drive-In"
      - molecule: activity
      - molecule: restaurant
      - molecule: "{queue, 0}"
  - type: Point
    parameters: [44.33815, 12.2633]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "Bar del Lago"
      - molecule: activity
      - molecule: restaurant
      - molecule: "{queue, 0}"
  - type: Point
    parameters: [44.33682, 12.26425]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "Locanda del Faro"
      - molecule: activity
      - molecule: restaurant
      - molecule: source, 0
      - molecule: "{queue, 0}"
  - type: Point
    parameters: [44.33589, 12.26293]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "McDonald's"
      - molecule: activity
      - molecule: restaurant
      - molecule: source, 0
      - molecule: "{queue, 0}"

# Define attractions
_attractions: &attractions
  - type: Point
    parameters: [44.33691, 12.26136]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "iSpeed"
      - molecule: activity
      - molecule: attraction
      - molecule: "{queue, 0}"
  - type: Point
    parameters: [44.33908, 12.26462]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "RioBravo"
      - molecule: activity
      - molecule: attraction
      - molecule: "{queue, 0}"
  - type: Point
    parameters: [44.33852, 12.26238]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "Raratonga"
      - molecule: activity
      - molecule: attraction
      - molecule: "{queue, 0}"
  - type: Point
    parameters: [44.33719, 12.26472]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "Delirium"
      - molecule: activity
      - molecule: attraction
      - molecule: "{queue, 0}"
  - type: Point
    parameters: [44.33793, 12.26698]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "Katun"
      - molecule: activity
      - molecule: attraction
      - molecule: "{queue, 0}"
  - type: Point
    parameters: [44.33831, 12.26194]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "AutoSplash"
      - molecule: activity
      - molecule: attraction
      - molecule: "{queue, 0}"
  - type: Point
    parameters: [44.33698, 12.26281]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "Casa Matta"
      - molecule: activity
      - molecule: attraction
      - molecule: "{queue, 0}"
  - type: Point
    parameters: [44.33539, 12.26133]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "DiVertical"
      - molecule: activity
      - molecule: attraction
      - molecule: "{queue, 0}"
  - type: Point
    parameters: [44.33734, 12.26611]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "Phobia"
      - molecule: activity
      - molecule: attraction
      - molecule: "{queue, 0}"
  - type: Point
    parameters: [44.3368, 12.2656]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "Columbia"
      - molecule: activity
      - molecule: attraction
      - molecule: "{queue, 0}"
  - type: Point
    parameters: [44.33779, 12.26401]
    programs: *gradient
    contents:
      - molecule: name
        concentration: "Monosaurus"
      - molecule: activity
      - molecule: attraction
      - molecule: "{queue, 0}"

# Deploy nodes
deployments:
  - *restaurants
  - *guests
